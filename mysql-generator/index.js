const L                   = require('lazy.js')

const { v4: uuid }        = require('uuid')

const { connection }      = require('./source/utils/db')

const { trace
      , rndmString
      , checkDecade
      , endsWithZero
      , extractTelIndex
      }                   = require('./source/utils/helpers')

const { removeAll 
      , insertGen
      }                   = require('./source/API/controller.db')

const { generateContacts
      }                   = require('./source/utils/generators')

const { head
      , chunk
      , random
      , compose
      , isUndefined
      }                   = require('lodash/fp')

const { N
      , HOST
      , DATABASE
      , GENNUMBER
      , TELLENGTH
      , PSSWDLENGTH
      , HASHTAGLENGTH
      , MINCONTACTSNUMBER
      , MAXCONTACTSNUMBER
      }                   = require('dotenv').config().parsed

const lazyTelephones      = L.generate(x => endsWithZero(x)
                                            ? undefined
                                            : [Number('1'.concat(x.toString().padStart(TELLENGTH - 1, 0))),
                                               rndmString(HASHTAGLENGTH),
                                               rndmString(PSSWDLENGTH)
                                              ]
                                      ).filter(x => !isUndefined(x))

// const generateContacts    = (gens, [min, max]) => gens.map(
//                                                   gen => (gen.map(
//                                                     row => L.generate(x => x)                               // infinite number sequence [0, 1, 2, 3, ...]
//                                                             .take(trace(checkDecade(random(min, max))))
//                                                             .filter(x => !endsWithZero(x))
//                                                             .toArray()
//                                                             .map(x => 
//                                                                compose(
//                                                                        contact => [head(row), contact],
//                                                                        Number,
//                                                                        index => index.concat(x.toString().padStart(TELLENGTH - index.length, 0)), 
//                                                                        extractTelIndex
//                                                                        )(head(row))
//                                                                       )
//                                                            ))
//                                                           )

                          // connection.connect((e) => e ? trace(e.message) : trace(`\n\nMySQL DB "${DATABASE}" connect on ${HOST}.\n`))
                          
                          // removeAll(connection, 'users')

                          console.time(`\n${N/1000000}M records generated by Lazy.js in`)

                          const telephones = chunk(N/GENNUMBER, lazyTelephones.take(N).toArray())
                          
                          console.timeEnd(`\n${N/1000000}M records generated by Lazy.js in`)

                          console.time(`\nContacts for ${N/1000000}M users generated in`)
                          
                          const contacts = generateContacts(N, telephones, [MINCONTACTSNUMBER, MAXCONTACTSNUMBER])

                          console.timeEnd(`\nContacts for ${N/1000000}M users generated in`)

                          // trace(L.generate(x => x).take(trace(checkDecade(10000))).filter(x => !endsWithZero(x)).toArray().length)
                          
                          // trace('\nSending generation to MySQL.\n')
                          
                          // gens.map((gen, i) => insertGen([connection, gen, uuid(), i, gen.length]))
                          
                          // trace('\nNode.js finished the work.')
                          
                          // connection.end((e) => e ? trace(e.message) : trace(`\nMySQL DB "${DATABASE}" disconnected.\n`))
